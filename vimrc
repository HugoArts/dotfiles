call pathogen#infect()

set background=dark
colorscheme wombat256mod

" python specific syntax setting
let python_highlight_all = 1
" ack.vim setting
let g:ackprg="ack-grep -H --nocolor --nogroup --column"
" autocommand for closetag.vim
autocmd FileType html,xml,xsl,ant source ~/.vim/scripts/closetag.vim

syntax on
filetype indent on
filetype plugin on

" some visual options
set hidden
set showcmd
set showmatch
set number
set cursorline
set visualbell
set nosmartindent
set scrolloff=3

" search settings
set incsearch
set ignorecase
set smartcase

" <tab> settings
set smarttab
set expandtab
set shiftwidth=4
set tabstop=4

" completion settings
set wildmenu
set wildmode=longest,list,full

" statusline settings
set laststatus=2
set statusline=[%n]\ %m%f\ %r%h%w%=\%5k\ %4l,%3v\ %3p%%\ %4LL\ [type=%Y]

"leader key. Insert mappings below
let mapleader=","

" set next/previous tab commands to switch buffers instead
nnoremap gt :bn<CR>
nnoremap gT :bp<CR>
nnoremap <F5> :buffers<CR>:buffer<Space>

" maybe this will help with arm pains I'm having?
inoremap jj <ESC>

" copy entire buffer to system clipboard and jump back to original position
nnoremap <leader>c :%y +<cr>

" quickly switch to previous buffer
nnoremap <leader>v <C-^>

" erase all trailing whitespace
nnoremap <leader>w :%s/\s\+$//g<CR>``

" surround selection in XML comment tags
vnoremap <leader>t :s/.*/<!-- & -->/<CR>

" :grep for word under cursor
nnoremap <leader>g :set operatorfunc=<SID>GrepOperator<cr>g@
vnoremap <leader>g :<C-U>call <SID>GrepOperator(visualmode())<cr>

function! s:GrepOperator(type)
    let saved_unnamed_register = @@

    if a:type ==# 'v'
        normal! `<v`>y
    elseif a:type ==# 'char'
        normal! `[v`]y
    else
        return
    endif

    silent execute "grep! -R " . shellescape(@@) . " ."
    copen

    let @@ = saved_unnamed_register
endfunction

" switch between number and relativenumber
nnoremap <leader>s :call <SID>ToggleNumber()<cr>

function! s:ToggleNumber()
    if &number
        set relativenumber
    else
        set number
    endif
endfunction


" scripting in python for mediawiki handling a little bit 'cause easier
" first two mappings to clean and collapse the wikitable the cursor is on
nnoremap <leader>tw :python clean_wikitable()<CR>
nnoremap <leader>tc :python collapse_wikitable()<CR>
python << endpython
import vim

def get_wikitable_range():
    """when cursor is inside wikitable get the vim line nrs. of the start and end"""
    w, c = vim.current.window, vim.current.window.cursor
    #find start and end of table.
    vim.command('/|}')
    end = w.cursor[0]
    vim.command('?{|')
    start = w.cursor[0]
    w.cursor = c
    return start, end

def clean_wikitable():
    """clean up autogenerated wikitables.

    removes superfluous table styles, empty lines, adds class="wikitable"
    """
    w, c = vim.current.window, vim.current.window.cursor
    start, end = get_wikitable_range()
    r = "{0},{1}".format(start, end)

    #remove styling, clutter, and empty lines from table
    vim.command('?{|')
    vim.current.line = '{|class="wikitable"'
    vim.command(r + "g/^|/normal 0ldf|")
    vim.command(r + "g/^$/d")

    #add proper table headers
    b = vim.current.buffer
    for i in xrange(start, end):
        if b[i].startswith("|-"):
            break
        elif "'" in b[i]:
            b[i] = "!" + b[i][1:].replace("'", "")
    w.cursor = c

def collapse_wikitable():
    """collapse multiline wikitable rows into single line "||" format"""
    from itertools import groupby
    w, c = vim.current.window, vim.current.window.cursor
    start, end = get_wikitable_range()

    table = []
    for key, group in groupby(w.buffer[start-1:end], lambda x: x[:2]):
        if key == "|-":
            table.extend(list(group))
        else:
            table.append((" " + key[0]).join(list(group)))

    w.buffer[start-1:end] = table
    w.cursor = c

endpython
